version: '2'

services:
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    restart: unless-stopped
    networks:
      - spark-kafka-network

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_HOST_NAME: 192.168.56.1
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    networks:
      - spark-kafka-network

networks:
  spark-kafka-network:
    driver: bridge









# AWS

# #!/bin/bash

# # Exit on critical errors
# set -e

# # Step 1: Update the system
# echo "Actualizando el sistema..."
# sudo apt update -y && sudo apt upgrade -y

# # Step 2: Install Docker
# echo "Instalando Docker..."
# sudo apt install -y docker.io

# # Step 3: Start and enable Docker
# echo "Iniciando y habilitando Docker..."
# sudo systemctl start docker
# sudo systemctl enable docker

# # Step 4: Add user to docker group
# echo "Agregando usuario al grupo docker..."
# sudo usermod -aG docker $USER

# # Step 5: Set permissions for Docker socket
# echo "Configurando permisos del socket de Docker..."
# sudo chmod 666 /var/run/docker.sock

# # Step 6: Install Docker Compose
# echo "Instalando Docker Compose..."
# sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
# sudo chmod +x /usr/local/bin/docker-compose
# if [ ! -f /usr/bin/docker-compose ]; then
#     sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
# else
#     echo "El enlace simbólico de Docker Compose ya existe, omitiendo creación."
# fi

# # Step 8: Stop any existing containers
# echo "Deteniendo contenedores existentes..."
# sudo docker-compose -f /home/ubuntu/docker-compose.yml down 2>/dev/null || true

# # Step 9: Create docker-compose.yml with dynamic IP
# echo "Creando docker-compose.yml con IP $PUBLIC_IP..."
# cat <<EOF > /home/ubuntu/docker-compose.yml
# version: '2'
# services:
#   zookeeper:
#     image: wurstmeister/zookeeper:latest
#     container_name: zookeeper
#     ports:
#       - "2181:2181"
#     restart: unless-stopped
#     networks:
#       - spark-kafka-network
#     volumes:
#       - zookeeper-data:/data
#       - zookeeper-datalog:/datalog

#   kafka:
#     image: wurstmeister/kafka:latest
#     container_name: kafka
#     ports:
#       - "9092:9092"
#     environment:
#       KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#       KAFKA_ADVERTISED_HOST_NAME: 13.219.123.126 #Esto es el Elastic IP
#       KAFKA_ADVERTISED_PORT: 9092
#       KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
#       KAFKA_BROKER_ID: 1
#       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#       KAFKA_HEAP_OPTS: "-Xmx512M -Xms512M"
#     volumes:
#       - kafka-data:/kafka
#       - /var/run/docker.sock:/var/run/docker.sock
#     restart: unless-stopped
#     networks:
#       - spark-kafka-network
#     depends_on:
#       - zookeeper

# networks:
#   spark-kafka-network:
#     driver: bridge

# volumes:
#   zookeeper-data:
#   zookeeper-datalog:
#   kafka-data:
# EOF

# # Step 10: Deploy Docker Compose stack
# echo "Iniciando el stack de Docker Compose..."
# sudo docker-compose -f /home/ubuntu/docker-compose.yml up -d

# # Step 11: Verify containers are running
# echo "Verificando contenedores en ejecución..."
# docker ps
